<!DOCTYPE html>
<html lang="en-GB" class="h-screen w-screen bg-black">
<head>
    <title x-text="`${$store.player.playbackObj.item?.name} - ${$store.player.playbackObj.item?.artists[0].name}">Spotify Connect - Now Playing</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <meta name="description" content="NowPlaying is a smooth Spotify Connect visualizer, updating in real-time and with playback support." />
    <link rel="icon" type="image/png" href="assets/images/favicon.png">

    <script src="https://cdn.tailwindcss.com/"></script>
    <script>
        tailwind.config = {
            theme: {
                extend: {
                    fontFamily: {
                        'sans': ['Outfit', 'sans-serif']
                    },
                }
            },
        }
    </script>

    <style>
        /* prevent horizontal scrollbar on mobile: https://stackoverflow.com/a/71128244 */
        html {
            overflow-x: hidden;
        }

        body {
            position: relative;
            overflow-x: hidden;
        }

        .custom-img-shadow {
            box-shadow:
                    0 5px 10px rgba(0, 0, 0, 0.12),
                    0 10px 20px rgba(0, 0, 0, 0.15),
                    0 15px 28px rgba(0, 0, 0, 0.18),
                    0 20px 38px rgba(0, 0, 0, 0.20);
        }

        [x-cloak] { display: none !important; }

        .clear-input-container {
            position: relative;
            display: inline-block;
        }

        .clear-input-button {
            /* button position */
            position: absolute;
            right: 8px;
            top: 10px;
            bottom: 0;
            /* button appearane */
            justify-content: center;
            align-items: center;
            width: 24px;
            height: 24px;
            appearance: none;
            border: none;
            border-radius: 50%;
            background: gray;
            margin: 0;
            padding: 2px;
            color: white;
            font-size: 18px;
            cursor: pointer;
            /* hide the button initially */
            display: none;
        }

        .clear-input-button:hover {
            background: darkgray;
        }

        .clear-input--touched:focus + .clear-input-button,
        .clear-input--touched:hover + .clear-input-button,
        .clear-input--touched + .clear-input-button:hover {
            display: inline-flex;
        }


        /* external css: flickity.css */

        .carousel {
            background: black;
        }

        .carousel-cell {
            width: 70%;
            height: 430px;
            /* flex-box, center image in cell */
            display: -webkit-box;
            display: -webkit-flex;
            display:         flex;
            -webkit-box-pack: center;
            -webkit-justify-content: center;
            justify-content: center;
            -webkit-align-items: center;
            align-items: center;
        }

        .carousel-cell img {
            display: block;
            max-width: 300px;
            max-height: 300px;
            /* dim unselected */
            opacity: 0.7;
            -webkit-transform: scale(0.85);
            transform: scale(0.85);
            -webkit-filter: blur(5px);
            filter: blur(5px);
            -webkit-transition: opacity 0.3s, -webkit-transform 0.3s, transform 0.3s, -webkit-filter 0.3s, filter 0.3s;
            transition: opacity 0.3s, transform 0.3s, filter 0.3s;
        }

        /* brighten selected image */
        .carousel-cell.is-selected img {
            opacity: 1;
            -webkit-transform: scale(1);
            transform: scale(1);
            -webkit-filter: none;
            filter: none;
        }

        @media screen and ( min-width: 768px ) {
            .carousel-cell {
                height: 430px;
            }
        }

        @media screen and ( min-width: 960px ) {
            .carousel-cell {
                width: 60%;
            }
        }

        /* buttons, no circle */
        .flickity-prev-next-button {
            width: 60px;
            height: 60px;
            background: transparent;
            opacity: 0.6;
        }
        .flickity-prev-next-button:hover {
            background: transparent;
            opacity: 1;
        }
        button.flickity-button:hover {
            background: white;
            opacity: 0.6;
        }
        /* arrow color */
        .flickity-prev-next-button .arrow {
            fill: white;
        }
        button.flickity-prev-next-button:hover .arrow {
            fill: black;
        }
        .flickity-prev-next-button.no-svg {
            color: white;
        }
        /* closer to edge */
        .flickity-prev-next-button.previous { left: 0; }
        .flickity-prev-next-button.next { right: 0; }
        /* hide disabled button */
        .flickity-prev-next-button:disabled {
            display: none;
        }
    </style>

    <!-- Font -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Outfit:wght@200..900&display=swap" rel="stylesheet">
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>

    <link href="https://unpkg.com/flickity@2/dist/flickity.css" rel="stylesheet">
    <script src="https://unpkg.com/flickity@2/dist/flickity.pkgd.min.js"></script>

    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/tw-elements/dist/css/tw-elements.min.css"/>

    <script src="assets/js/scripts.js?v=20240229"></script>
    <script src="assets/js/playing.js?v=20240229"></script>
</head>
<body
        x-data="{
        translations: {
            defaultTitleSong: 'No music currently playing',
            defaultArtistSong: 'Please wait a few seconds while status is updating',
        },
        showOverlay: true,
        timeout: null,

        deviceName: window.deviceName,

        handleMouseMove() {
            this.showOverlay = true;

            window.clearTimeout(this.timeout);
            this.timeout = setTimeout(() => {
                this.showOverlay = false;
            }, 6000);
        },
    }"
        x-init="handleMouseMove"
        @mousemove.throttle="handleMouseMove"
        class="flex h-screen w-screen overflow-hidden np_music_paused"
        :style="{
        cursor: showOverlay ? 'default' : 'none'
    }"
>
<div
        id="background-image-div"
        class="absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 translate-z-0 w-[max(115vh,115vw)] h-[max(115vh,115vw)]"
>
    <div
            class="bg-cover bg-center transition-[background] duration-[2s] ease-in-out z-[-10] h-full w-full blur-2xl transform-gpu"
            style="background-image: url('assets/images/no_song.png');"
            :style="{
                backgroundImage: `url(${$store.player.targetImg ?? 'assets/images/no_song.png'})`
            }"
    >
        <div class="h-full w-full bg-black/30"></div>
    </div>
</div>

<div
        x-show="showOverlay"
        x-transition:enter.duration.100ms
        x-transition:leave.duration.500ms
        id="settings-div"
        class="settings-div fadeInOut z-30 absolute top-6 left-0 right-0 flex items-center justify-center"
>
    <div class="flex flex-row items-center gap-2 px-4 py-2 bg-white/10 border-2 border-white/40 text-white/80 rounded-full">
        <svg onclick="fullscreen()" class="cursor-pointer" width="28" height="28" viewBox="0 0 32 32" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M6.66675 6.66666H13.3334V9.33332H9.33341V13.3333H6.66675V6.66666ZM18.6667 6.66666H25.3334V13.3333H22.6667V9.33332H18.6667V6.66666ZM22.6667 18.6667H25.3334V25.3333H18.6667V22.6667H22.6667V18.6667ZM13.3334 22.6667V25.3333H6.66675V18.6667H9.33341V22.6667H13.3334Z" fill="white"/>
        </svg>
    </div>
</div>

<div class="h-full w-full overflow-y-auto flex align-center justify-center z-20">
    <div class="flex flex-col landscape:flex-row lg:flex-row gap-6 lg:gap-12 justify-center items-center px-6 lg:px-12 xl:px-0 w-full xl:w-5/6">
        <div class="relative w-[20rem] landscape:w-[20rem] landscape:lg:w-[30rem] md:w-[30rem] flex-shrink-0">
            <img
                    src="assets/images/no_song.png"
                    :src="$store.player.targetImg ?? 'assets/images/no_song.png'"
                    class="rounded-2xl h-auto w-full custom-img-shadow"
            >

            <!-- Web playback SDK -->

            <button
                    x-cloak
                    @click="$store.webPlayback.togglePlay()"
                    x-show="$store.webPlayback?.isAvailable && showOverlay"
                    x-transition:enter.duration.100ms
                    x-transition:leave.duration.150ms
                    class="absolute bottom-6 right-6 z-30 p-3 bg-black/20 border-2 border-white/60 text-white rounded-full backdrop-blur-lg active:scale-95 transition"
            >
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" class="h-10 w-10" fill="currentColor" x-show="$store.player.playbackObj?.is_playing"><path d="M14,19H18V5H14M6,19H10V5H6V19Z" /></svg>
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" class="h-10 w-10" fill="currentColor" x-show="!$store.player.playbackObj?.is_playing"><path d="M8,5.14V19.14L19,12.14L8,5.14Z" /></svg>
            </button>

            <div
                    x-cloak
                    x-show="$store.webPlayback?.isAvailable && showOverlay"
                    x-transition:enter.duration.100ms
                    x-transition:leave.duration.150ms
                    class="absolute bottom-6 left-6 z-30 flex flex-row bg-black/20 border-2 border-white/60 text-white rounded-full backdrop-blur-lg"
            >
                <button class="px-3 py-1 active:scale-95 transition" @click="$store.webPlayback.previousTrack()">
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" class="h-6 w-6" fill="currentColor"><path d="M6,18V6H8V18H6M9.5,12L18,6V18L9.5,12Z" /></svg>
                </button>
                <button class="px-3 py-1 active:scale-95 transition" @click="$store.webPlayback.nextTrack()">
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" class="h-6 w-6" fill="currentColor"><path d="M16,18H18V6H16M6,18L14.5,12L6,6V18Z" /></svg>
                </button>
            </div>
        </div>

        <div class="flex flex-col lg:gap-1 xl:gap-2 w-full text-white">
            <h1
                    x-text="$store.player.playbackObj.now_playing?.song_title ?? translations.defaultTitleSong"
                    id="song-title"
                    class="text-4xl lg:text-7xl font-bold text-pretty">
            </h1>
            <h2
                    x-text="$store.player.playbackObj.now_playing?.artist ?? translations.defaultArtistSong"
                    id="song-artist"
                    class="text-2xl lg:text-5xl font-bold text-pretty">
            </h2>
            <h3
                    x-text="$store.player.playbackObj?.item?.album?.name"
                    id="song-album"
                    class="text-xl lg:text-4xl font-semibold opacity-80 text-pretty">
            </h3>

            <div class="flex flex-col gap-2 lg:gap-3 mt-4 lg:mt-8 w-full">
                <div class="text-xl flex flex-row justify-between w-full font-semibold" id="progress-time">
                        <span
                                x-show="$store.player.playbackObj?.progress_ms"
                                x-text="msToTime($store.player.playbackObj?.progress_ms)"
                                x-cloak
                                id="progress-time-now"
                        ></span>
                    <span
                            x-show="$store.player.playbackObj?.duration_ms"
                            x-text="msToTime($store.player.playbackObj?.duration_ms)"
                            x-cloak
                            id="progress-time-total"
                    ></span>
                </div>

                <div class="h-3 w-full rounded-full overflow-hidden bg-white/30">
                    <div
                            id="progressbar"
                            class="h-full bg-white"
                            :class="{
                                'transition-all duration-1000 ease-linear': Math.abs($store.player.playbackObj?.progress_ms - $store.player.lastPlaybackObj?.progress_ms) < 5000
                            }"
                            :style="{
                                width: `${($store.player.playbackObj?.progress_ms / $store.player.playbackObj?.duration_ms) * 100}%`
                            }"
                    ></div>
                </div>

                <div x-show="$store.player.playbackObj?.next_track" class="flex flex-row gap-3 items-center" id="player-controls">
                    <div>
                        <svg width="28" height="28" data-encore-id="icon" role="img" aria-hidden="true" viewBox="0 0 16 16" style="vector-effect: non-scaling-stroke; fill: currentcolor;"><path d="M15 15H1v-1.5h14V15zm0-4.5H1V9h14v1.5zm-14-7A2.5 2.5 0 0 1 3.5 1h9a2.5 2.5 0 0 1 0 5h-9A2.5 2.5 0 0 1 1 3.5zm2.5-1a1 1 0 0 0 0 2h9a1 1 0 1 0 0-2h-9z"></path></svg>
                    </div>

                    <span class="text-xl font-bold">
                            Next Up:
                            <span x-text="$store.player.playbackObj?.next_track?.song_title + ` by ` + $store.player.playbackObj?.next_track?.artist"></span>
                    </span>
                </div>

                <div class="z-30 flex flex-row justify-end">
                    <!-- Button trigger modal -->
                    <button class="z-30 flex flex-row items-center gap-2 px-4 py-1 bg-white/10 border border-white/40 text-white/80 rounded-full"
                            data-twe-toggle="modal"
                            data-twe-target="#queueModal"
                            data-twe-ripple-init
                            data-twe-ripple-color="light">
                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" class="h-6 w-6" fill="currentColor"><path d="M16.5 3H21.5C22.3 3 23 3.7 23 4.5V7.5C23 8.3 22.3 9 21.5 9H18L15 12V4.5C15 3.7 15.7 3 16.5 3M3 3C1.9 3 1 3.9 1 5V19C1 20.1 1.9 21 3 21H11C12.1 21 13 20.1 13 19V5C13 3.9 12.1 3 11 3H3M7 5C8.1 5 9 5.9 9 7S8.1 9 7 9 5 8.1 5 7 5.9 5 7 5M7 11C9.2 11 11 12.8 11 15S9.2 19 7 19 3 17.2 3 15 4.8 11 7 11M7 13C5.9 13 5 13.9 5 15S5.9 17 7 17 9 16.1 9 15 8.1 13 7 13" /></svg>
                        <span>Queue a Song</span>
                    </button>
                </div>

            </div>
        </div>
    </div>
</div>

<!-- Modal -->
<div data-twe-modal-init class="fixed left-0 top-10 z-[1055] px-1 py-1 hidden h-full w-full overflow-y-auto overflow-x-hidden outline-none"
     id="queueModal" tabindex="-1" aria-labelledby="queueModalLabel" aria-hidden="true">
    <div data-twe-modal-dialog-ref class="pointer-events-none relative w-auto translate-y-[-50px] opacity-0 transition-all duration-300 ease-in-out min-[576px]:mx-auto min-[576px]:mt-7 min-[576px]:max-w-[500px]">
        <div class="min-[576px]:shadow-[0_0.5rem_1rem_rgba(#000, 0.15)] pointer-events-auto relative flex w-full flex-col rounded-md border-none bg-clip-padding text-current shadow-lg outline-none bg-slate-800">
            <div class="flex flex-shrink-0 items-center justify-between rounded-t-md border-b-2 border-neutral-100 border-opacity-100 p-4 dark:border-opacity-50">
                <!--Modal title-->
                <h5 class="text-xl font-medium leading-normal text-neutral-200" id="queueModalLabel">
                    Choose a Song
                </h5>
                <!--Close button-->
                <button type="button"
                        class="box-content rounded-none border-none text-white hover:no-underline hover:opacity-75 focus:opacity-100 focus:shadow-none focus:outline-none"
                        data-twe-modal-dismiss aria-label="Close">
                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="h-6 w-6">
                        <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" />
                    </svg>
                </button>
            </div>

            <!--Modal body-->
            <!--alpinejs example: https://alpinejs.codewithhugo.com/fetch-data/ -->
            <!-- https://dberri.com/lets-build-an-ajax-form-with-alpine-js/ -->
            <!-- https://ember.2038.io/slider.html -->
            <div x-data="spotifySearch()" x-init="$watch('searchResults', value => resetCarousel())" class="relative flex-auto p-2" data-twe-modal-body-ref>
                <div class="flex flex-row gap-2 py-1" data-twe-dropdown-ref>
                    <!-- https://nikitahl.com/input-clear-button -->
                    <div class="clear-input-container flex w-2/3">
                        <input type="text" name="spotifySearchInput" x-model="spotifySearchInput" class="clear-input w-full bg-white focus:outline-none focus:shadow-outline border border-gray-300 rounded-lg p-2 appearance-none leading-normal">
                        <button class="clear-input-button" aria-label="Clear input" title="Clear input">
                            &times;
                        </button>
                    </div>
                    <button type="button" id="btn-track-search" @click="doSearch('track')" class="ml-1 inline-block rounded bg-indigo-600 px-6 pb-2 pt-2.5 text-xs font-medium uppercase leading-normal text-white transition duration-150 ease-in-out hover:bg-indigo-800 focus:outline-none focus:ring-0"
                            :class="[ isLoading ? 'opacity-50 cursor-not-allowed' : 'active:bg-primary-700 hover:bg-primary-600' ]" :disabled="isLoading"
                            data-twe-ripple-init data-twe-ripple-color="light">
                        Search
                    </button>
                    <button type="button" class="inline-block rounded bg-indigo-600 px-3 pb-2 text-xs font-medium uppercase leading-normal text-white transition duration-150 ease-in-out hover:bg-indigo-800 focus:outline-none focus:ring-0"
                            :class="[ isLoading ? 'opacity-50 cursor-not-allowed' : 'active:bg-primary-700 hover:bg-primary-600' ]" :disabled="isLoading"
                            data-twe-ripple-init data-twe-ripple-color="light"
                            id="dropdownMenuButton3"
                            data-twe-dropdown-toggle-ref>
                        <span class="ms-2 w-2 [&>svg]:h-5 [&>svg]:w-5">
                            <svg fill="#FFFFFF" width="20px" height="20px" viewBox="0 0 256 256" id="Flat" xmlns="http://www.w3.org/2000/svg">
                                <path d="M128,188a11.96187,11.96187,0,0,1-8.48535-3.51465l-80-80a12.0001,12.0001,0,0,1,16.9707-16.9707L128,159.0293l71.51465-71.51465a12.0001,12.0001,0,0,1,16.9707,16.9707l-80,80A11.96187,11.96187,0,0,1,128,188Z"/>
                            </svg>
                        </span>
                    </button>
                    <ul class="absolute z-[1000] float-left m-0 hidden min-w-max list-none overflow-hidden rounded-lg border-none bg-white bg-clip-padding text-base shadow-lg data-[twe-dropdown-show]:block dark:bg-surface-dark"
                        aria-labelledby="dropdownMenuButton3"
                        data-twe-dropdown-menu-ref>
                        <li>
                            <a class="block w-full whitespace-nowrap bg-neutral-800 px-4 py-2 text-sm font-normal text-neutral-200 hover:bg-zinc-200/60 focus:bg-zinc-200/60 focus:outline-none active:bg-zinc-200/60 active:no-underline hover:text-neutral-800"
                               @click="doSearch('artist')"
                               data-twe-dropdown-item-ref>Artist Search</a>
                        </li>
                        <li>
                            <a class="block w-full whitespace-nowrap bg-neutral-800 px-4 py-2 text-sm font-normal text-neutral-200 hover:bg-zinc-200/60 focus:bg-zinc-200/60 focus:outline-none active:bg-zinc-200/60 active:no-underline hover:text-neutral-800"
                               @click="doSearch('album')"
                               data-twe-dropdown-item-ref>Album Search</a>
                        </li>
                        <li>
                            <a class="block w-full whitespace-nowrap bg-neutral-800 px-4 py-2 text-sm font-normal text-neutral-200 hover:bg-zinc-200/60 focus:bg-zinc-200/60 focus:outline-none active:bg-zinc-200/60 active:no-underline hover:text-neutral-800"
                               @click="doSearch('playlist')"
                               data-twe-dropdown-item-ref>Playlist Search</a>
                        </li>
                    </ul>
                </div>
                <div x-cloak x-show="message" class="flex flex-row gap-2 py-1 pl-4 text-sm"
                     x-transition:enter.duration.100ms
                     x-transition:leave.duration.500ms>
                    <span x-text="message" :class="isError ? 'text-red-500' : 'text-yellow-300'"></span>
                </div>
                <div x-cloak="searchResults" x-show="searchResults" class="carousel js-flickity" data-flickity='{ "draggable": true, "pageDots": false }'>
                        <template x-for="track in searchResults?.tracks?.items" :key="track.uri">
                            <div class="carousel-cell">
                                <div class="text-sm justify-center flex flex-col">
                                    <template x-if="track.album.images.length > 1">
                                        <img :src="track.album.images[1].url">
                                    </template>
                                    <template x-if="track.album.images.length == 1">
                                        <img :src="track.album.images[0].url">
                                    </template>
                                    <h3 class="text-white text-base font-bold leading-none mb-2" x-text="track.name"></h3>
                                    <h4 class="text-slate-300 text-sm font-bold leading-none mb-2" x-text="track.album.artists.map(artist => artist.name).join(',')"></h4>
                                    <div class="flex flex-row justify-center">
                                        <button @click="queueTrack(track.uri)" class="flex bg-gray-200 rounded-full px-3 py-1 text-sm font-semibold text-gray-700">Queue Track</button>
                                    </div>
                                </div>
                            </div>
                        </template>

                        <!------ ARTIST SEARCH RESULTS ------->
                        <template x-for="artist in searchResults?.artists?.items" :key="artist.uri">
                            <div class="carousel-cell">
                                <div class="text-sm justify-center flex flex-col">
                                    <template x-if="artist.images.length > 1">
                                        <img :src="artist.images[1].url">
                                    </template>
                                    <template x-if="artist.images.length == 1">
                                        <img :src="artist.images[0].url">
                                    </template>
                                    <h3 class="text-white text-base font-bold leading-none mb-2" x-text="artist.name"></h3>
                                    <div class="flex flex-row justify-center my-1">
                                        <button @click="playItem('artist', artist.name, artist.uri)" class="flex bg-gray-200 rounded-full px-3 py-1 text-sm font-semibold text-gray-700">Play Artist</button>
                                    </div>
                                    <div class="flex flex-row justify-center my-1">
                                        <button @click="playRadio('artist', artist.name, artist.id)" class="flex bg-gray-200 rounded-full px-3 py-1 text-sm font-semibold text-gray-700">Play Artist Radio</button>
                                    </div>
                                </div>
                            </div>
                    </template>

                    <!------ ALBUM SEARCH RESULTS ------->
                    <template x-for="album in searchResults?.albums?.items" :key="album.uri">
                        <div class="carousel-cell">
                            <div class="text-sm justify-center flex flex-col">
                                <template x-if="album.images.length > 1">
                                    <img :src="album.images[1].url">
                                </template>
                                <template x-if="album.images.length == 1">
                                    <img :src="album.images[0].url">
                                </template>
                                <h3 class="text-white text-base font-bold leading-none mb-2" x-text="album.name"></h3>
                                <h4 class="text-slate-300 text-sm font-bold leading-none mb-2" x-text="album.artists.map(artist => artist.name).join(',')"></h4>
                                <div class="flex flex-row justify-center my-1">
                                    <button @click="playItem('album', album.name, album.uri)" class="flex bg-gray-200 rounded-full px-3 py-1 text-sm font-semibold text-gray-700">Play Album</button>
                                </div>
                                <div class="flex flex-row justify-center my-1">
                                    <button @click="playRadio('album', album.name, album.id)" class="flex bg-gray-200 rounded-full px-3 py-1 text-sm font-semibold text-gray-700">Play Album Radio</button>
                                </div>
                            </div>
                        </div>
                    </template>

                    <!------ PLAYLIST SEARCH RESULTS ------->
                    <template x-for="playlist in searchResults?.playlists?.items" :key="playlist.uri">
                        <div class="carousel-cell">
                            <div class="text-sm justify-center flex flex-col">
                                <template x-if="playlist.images.length > 1">
                                    <img :src="playlist.images[1].url">
                                </template>
                                <template x-if="playlist.images.length == 1">
                                    <img :src="playlist.images[0].url">
                                </template>
                                <h3 class="text-white text-base font-bold leading-none mb-2" x-text="playlist.name"></h3>
                                <h4 class="text-slate-300 text-sm font-bold leading-none mb-2" x-text="playlist.owner.display_name"></h4>
                                <div class="flex flex-row justify-center my-1">
                                    <button @click="playItem('playlist', playlist.name, playlist.uri)" class="flex bg-gray-200 rounded-full px-3 py-1 text-sm font-semibold text-gray-700">Set Playlist</button>
                                </div>
                                <div class="flex flex-row justify-center my-1">
                                    <button @click="playRadio('playlist', playlist.name, playlist.id)" class="flex bg-gray-200 rounded-full px-3 py-1 text-sm font-semibold text-gray-700">Play Playlist Radio</button>
                                </div>
                            </div>
                        </div>
                    </template>
                </div>
            </div>
        </div>
    </div>
</div>

<script src="//unpkg.com/alpinejs" defer></script>
<script>
    window.deviceName = 'JamBot #' + localStorage.getItem('deviceId');

    const waitForAlpine = new Promise((resolve, reject) => {
        document.addEventListener('alpine:init', () => {
            resolve();
        });
    });

    Promise.all([waitForAlpine]).then(() => {

        Alpine.store('webPlayback', {
            isAvailable: {{show_playback_controls}},

        togglePlay() {
            Alpine.store('player').togglePlay();
        },

        nextTrack() {
            Alpine.store('player').nextTrack();
        },

        previousTrack() {
            Alpine.store('player').prevTrack();
        },

        init() {
            // nothing to do here
        },
    });
    });

    function spotifySearch() {
        return {
            spotifySearchInput: "",
            searchResults: null,
            isLoading: false,
            message: null,
            isError: false,
            doSearch(searchType) {
                this.isLoading = true;
                if (this.spotifySearchInput.length) {
                    fetch(`/search-all?types=${searchType}&terms=${encodeURIComponent(this.spotifySearchInput)}`)
                            .then(res => res.json())
                            .then(data => {
                                this.isLoading = false;
                                this.searchResults = data;
                            })
                            .catch(err => this.setMessage("Something wonky happened. Try again later. " + err.message))
                }
                else {
                    this.isLoading = false;
                }
            },
            resetCarousel() {
                if ($('.carousel').length) {
                    $('.carousel').flickity('reloadCells')
                    // bit of a hack; the two "template" elements appear as additional cells at the start/end of the cells array

                    // remove the template elements from the end of the carousel
                    for (let carouselLen = $('.carousel').data('flickity').cells.length;
                         $('.carousel').data('flickity').cells[carouselLen - 1].element.tagName == 'TEMPLATE';
                         carouselLen--) {
                        $('.carousel').data('flickity').cells.pop();
                    }

                    // remove the template elements from the front of the carousel
                    while ($('.carousel').data('flickity').cells[0].element.tagName == 'TEMPLATE') {
                        $('.carousel').data('flickity').cells.shift();
                    }

                    $('.carousel')
                            .flickity('resize')
                            .flickity('selectCell', 0)

                    // Fix overlapping images on first load: https://github.com/metafizzy/flickity/issues/206
                    setTimeout(function () {
                        window.dispatchEvent(new Event('resize'));
                    }, 200);
                }
            },
            setMessage(text, is_error = false) {
                this.message = text;
                this.isError = is_error;
                setTimeout(() => {
                    this.message = null;
                    this.isError = false;
                }, 10000); // set visibility for 10 seconds
            },
            queueTrack(trackUri) {
                if (trackUri) {
                    fetch(`/queue-track?trackUri=${trackUri}`)
                        .then(res => {
                            if (res.ok) {
                                this.setMessage("Track queued.")
                            }
                            else {
                                res.json().then(msg => this.setMessage(msg.error, true))
                            }
                        })
                        .catch(err => this.setMessage(err.message, true));
                }
            },
            playItem(itemType, itemName, itemUri) {
                fetch(`/play?contextUri=${itemUri}`)
                        .then(res => {
                            if (res.ok) {
                                this.setMessage(`Playing ${itemType} ${itemName}`)
                            }
                            else {
                                res.json().then(msg => this.setMessage(msg.error, true))
                            }
                        })
                        .catch(err => this.setMessage(err.message, true));
            },
            playRadio(itemType, itemName, itemId) {
                fetch(`/play?contextUri=spotify:radio:${itemType}:${itemId}`)
                        .then(res => {
                            if (res.ok) {
                                this.setMessage("Playing " + itemName + " radio")
                            }
                            else {
                                res.json().then(msg => this.setMessage(msg.error, true))
                            }
                        })
                        .catch(err => this.setMessage(err.message, true));
            }
        }
    }

    // handle search input field events: (clearing, enter key pressed, ...)
    const input = document.querySelector("input[name='spotifySearchInput']");
    const clearInput = document.querySelector(".clear-input")
    const clearButton = document.querySelector(".clear-input-button")

    // Execute when the user presses the enter key on the keyboard
    input.addEventListener("keypress", (ev) => {
        if (ev.key === "Enter") {
            ev.preventDefault();
            document.querySelector("#btn-track-search").click();
        }
    });

    const handleInputChange = (e) => {
        if (e.target.value && !clearInput.classList.contains("clear-input--touched")) {
            clearInput.classList.add("clear-input--touched")
        } else if (!e.target.value && input.classList.contains("clear-input--touched")) {
            clearInput.classList.remove("clear-input--touched")
        }
    }

    const handleButtonClick = (e) => {
        clearInput.value = ''
        clearInput.focus()
        clearInput.classList.remove("clear-input--touched")
    }

    clearButton.addEventListener("click", handleButtonClick)
    input.addEventListener("input", handleInputChange)
</script>

<!-- TW Elements is free under AGPL, with commercial license required for specific uses. See more details: https://tw-elements.com/license/ and contact us for queries at tailwind@mdbootstrap.com -->
<script src="https://cdn.jsdelivr.net/npm/tw-elements@2.0.0/js/tw-elements.umd.min.js"></script>

</body>
</html>
